// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlayNirvana.Bll.DataContext;

#nullable disable

namespace PlayNirvana.Bll.Migrations
{
    [DbContext(typeof(PlayNirvanaDbContext))]
    [Migration("20250814175730_AlterSomeTables")]
    partial class AlterSomeTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlayNirvana.Domain.Entites.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BetStatus")
                        .HasColumnType("int");

                    b.Property<int>("BetType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoundId");

                    b.HasIndex("TicketId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.DogPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BetId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("RacingDogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BetId");

                    b.HasIndex("RacingDogId");

                    b.ToTable("DogPositions");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.RaceDogResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Place")
                        .HasColumnType("int");

                    b.Property<int>("RacingDogId")
                        .HasColumnType("int");

                    b.Property<int>("RoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RacingDogId");

                    b.HasIndex("RoundId");

                    b.ToTable("RaceDogResults");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.RacingDog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RacingDogs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dogo1",
                            Number = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Dogo2",
                            Number = 2
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dogo3",
                            Number = 3
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dogo4",
                            Number = 4
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dogo5",
                            Number = 5
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dogo6",
                            Number = 6
                        },
                        new
                        {
                            Id = 7,
                            Name = "Dogo7",
                            Number = 7
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dogo8",
                            Number = 8
                        },
                        new
                        {
                            Id = 9,
                            Name = "Dogo9",
                            Number = 9
                        });
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.Round", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoundStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Rounds");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BetAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("WinAmount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.Bet", b =>
                {
                    b.HasOne("PlayNirvana.Domain.Entites.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayNirvana.Domain.Entites.Ticket", null)
                        .WithMany("Bets")
                        .HasForeignKey("TicketId");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.DogPosition", b =>
                {
                    b.HasOne("PlayNirvana.Domain.Entites.Bet", "Bet")
                        .WithMany("DogPositions")
                        .HasForeignKey("BetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayNirvana.Domain.Entites.RacingDog", "RacingDog")
                        .WithMany()
                        .HasForeignKey("RacingDogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bet");

                    b.Navigation("RacingDog");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.RaceDogResult", b =>
                {
                    b.HasOne("PlayNirvana.Domain.Entites.RacingDog", "RacingDog")
                        .WithMany()
                        .HasForeignKey("RacingDogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayNirvana.Domain.Entites.Round", "Round")
                        .WithMany()
                        .HasForeignKey("RoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RacingDog");

                    b.Navigation("Round");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.Bet", b =>
                {
                    b.Navigation("DogPositions");
                });

            modelBuilder.Entity("PlayNirvana.Domain.Entites.Ticket", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
